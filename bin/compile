#!/bin/sh

set -e

mkdir -p "$1" "$2"

build_dir=$1
cache_dir=$2
env_dir=$3
buildpack_dir=$(cd "$(dirname $0)/.." && pwd)

env_blacklist_regex='(PATH|GEM_PATH|GEM_HOME|GIT_DIR|SSH_KEY)'

if [ -d "$env_dir" ]; then
  for e in $(ls $env_dir); do
    echo "$e" | grep -qvE "$env_blacklist_regex" &&
    export "$e=$(cat $env_dir/$e)"
    :
  done
fi

go_version=${GO_VERSION:-"go1.8.3"}
go_filename="$go_version.linux-amd64.tar.gz"
go_url="https://storage.googleapis.com/golang/$go_filename"
go_cache_path="$cache_dir/$go_filename"

profile_d_dir="$build_dir/.profile.d"
mkdir -p $profile_d_dir

title() {
  echo ""
  echo "-----> $1"
}

comment() {
  echo "       $1"
}

indent() {
  sed -u 's/^/       /'
}


if [ ! -e "$go_cache_path" ]; then
  title "Download go from $go_url..."
  wget "$go_url" -O "$go_cache_path" --quiet
else
  title "Go was cached before."
fi

title "Unpacking go..."
tar zxf "$go_cache_path" -C "$buildpack_dir"

export GOROOT=$buildpack_dir/go
export PATH=$GOROOT/bin:$PATH


title "Installing dependencies with apt-get..."

apt_cache_dir="$cache_dir/apt/cache"
apt_state_dir="$cache_dir/apt/state"

mkdir -p "$apt_cache_dir/archives/partial"
mkdir -p "$apt_state_dir/lists/partial"

apt_options="-o debug::nolocking=true -o dir::cache=$apt_cache_dir -o dir::state=$apt_state_dir"
apt-get $apt_options update | indent
apt-get $apt_options -y -d install --reinstall libvips-dev | indent

mkdir -p $build_dir/.apt

for deb in $(ls -1 $apt_cache_dir/archives/*.deb); do
  comment "Installing $(basename $deb)"
  dpkg -x $deb $build_dir/.apt/
done

export PATH="$build_dir/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$build_dir/.apt/usr/lib/x86_64-linux-gnu:$build_dir/.apt/usr/lib/i386-linux-gnu:$build_dir/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$build_dir/.apt/usr/lib/x86_64-linux-gnu:$build_dir/.apt/usr/lib/i386-linux-gnu:$build_dir/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$build_dir/.apt/usr/include:$build_dir/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$build_dir/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$build_dir/.apt/usr/lib/i386-linux-gnu/pkgconfig:$build_dir/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

cat <<EOF > $profile_d_dir/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF


title "Building imgproxy..."
mkdir "$build_dir/bin"

echo ls -la '$build_dir'
echo ls -la "$build_dir"
ls -la "$build_dir"

echo ls -la '$buildpack_dir'
echo ls -la "$buildpack_dir"
ls -la "$buildpack_dir"

echo ls -la '$profile_d_dir'
echo ls -la "$profile_d_dir"
ls -la "$profile_d_dir"

echo ls -la '`pwd`'
echo "ls -la `pwd`"
ls -la `pwd`

[ -d "vendor" ] && cp -r vendor/* "$GOROOT/src/"

go build -tags heroku -o "$build_dir/bin/imgproxy"

echo 'export PATH=$HOME/bin:$PATH' > $profile_d_dir/001_imgproxy.sh
